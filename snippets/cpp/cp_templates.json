{
    "tm": {
        "prefix": [
            "tm"
        ],
        "body": [
            "#include <bits/extc++.h>",
            "",
            "#ifndef DEBUG",
            "#define dbg(...)",
            "#define dbg_print(x)",
            "#endif",
            "",
            "using ll = long long;",
            "using ld = long double;",
            "",
            "int len(const auto &x) {",
            "\treturn static_cast<int>(x.size());",
            "}",
            "",
            "constexpr ll LINF = 0x3f3f3f3f3f3f3f3f;",
            "constexpr int INF = 0x3f3f3f3f;",
            "// constexpr int MOD = 1e9 + 7;",
            "constexpr int MOD = 998244353;",
            "",
            "struct custom_hash {",
            "\tconst uint64_t RANDOM =",
            "\t\tstd::chrono::high_resolution_clock::now().time_since_epoch().count();",
            "",
            "\tstatic uint64_t splitmix64(uint64_t x) {",
            "\t\tx += 0x9e3779b97f4a7c15;",
            "\t\tx = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;",
            "\t\tx = (x ^ (x >> 27)) * 0x94d049bb133111eb;",
            "\t\treturn x ^ (x >> 31);",
            "\t}",
            "",
            "\ttemplate <class T>",
            "\tsize_t operator()(const T &x) const {",
            "\t\treturn splitmix64(std::hash<T>{}(x) + RANDOM);",
            "\t}",
            "",
            "\ttemplate <class T1, class T2>",
            "\tsize_t operator()(const std::pair<T1, T2> &x) const {",
            "\t\treturn splitmix64(",
            "\t\t\tstd::hash<T1>{}(x.first) * 31 + std::hash<T2>{}(x.second) + RANDOM",
            "\t\t);",
            "\t}",
            "};",
            "",
            "template <class K, class V>",
            "using hash_table = __gnu_pbds::gp_hash_table<K, V, custom_hash>;",
            "",
            "template <class T>",
            "using hash_set =",
            "\t__gnu_pbds::gp_hash_table<T, __gnu_pbds::null_type, custom_hash>;",
            "",
            "int TC = 1;",
            "constexpr int MAXN = 2e5 + 5;",
            "",
            "void solve() {",
            "\t$0",
            "}",
            "",
            "int main() {",
            "#ifndef DEBUG",
            "\tstd::cin.sync_with_stdio(false);",
            "\tstd::cin.tie(0);",
            "#endif",
            "\t// cin >> TC;",
            "\tfor (int i = 0; i < TC; ++i) {",
            "\t\tsolve();",
            "\t}",
            "}"
        ]
    },
    "ph": {
        "prefix": [
            "ph"
        ],
        "body": [
            "using hash_result = std::array<std::vector<ll>, 2>;",
            "struct polynomial_hash {",
            "\tstd::array<int, 2> bases;",
            "\tint zero;",
            "\tstd::array<std::vector<ll>, 2> pw;",
            "\tvoid init(int n, char min_char, int base1, int base2) {",
            "\t\tbases = {base1, base2};",
            "\t\tzero = min_char - 1;",
            "\t\tfor (int i = 0; i < 2; i++) {",
            "\t\t\tpw[i].resize(n + 1);",
            "\t\t\tpw[i][0] = 1;",
            "\t\t\tfor (int j = 1; j <= n; j++) {",
            "\t\t\t\tpw[i][j] = pw[i][j - 1] * bases[i] % MOD;",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\thash_result compute_hash(const std::string &s) {",
            "\t\thash_result res;",
            "\t\tfor (int i = 0; i < 2; i++) {",
            "\t\t\tres[i].resize(s.size() + 1);",
            "\t\t\tfor (int j = 1; j <= len(s); j++) {",
            "\t\t\t\tres[i][j] = (res[i][j - 1] * bases[i] + s[j - 1] - zero) % MOD;",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\tstd::array<ll, 2> subhash(const hash_result &hash, int l, int r) {",
            "\t\tstd::array<ll, 2> res;",
            "\t\tfor (int i = 0; i < 2; i++) {",
            "\t\t\tres[i] =",
            "\t\t\t\t(hash[i][r] - hash[i][l - 1] * pw[i][r - l + 1] % MOD + MOD) %",
            "\t\t\t\tMOD;",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "};"
        ]
    },
    "fw": {
        "prefix": [
            "fw"
        ],
        "body": [
            "",
            "struct fenwick {",
            "\tstd::vector<ll> vec;",
            "\tint n;",
            "\tvoid build(int n_) {",
            "\t\tn = n_;",
            "\t\tvec.assign(n + 1, 0);",
            "\t}",
            "\tvoid build(const std::vector<int> &v) {",
            "\t\tbuild(len(v));",
            "\t\tfor (int i = 1; i <= n; i++) {",
            "\t\t\tvec[i] += v[i - 1];",
            "\t\t\tint r = i + (i & -i);",
            "\t\t\tif (r <= n) {",
            "\t\t\t\tvec[r] += vec[i];",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "\tvoid add(int i, ll val) {",
            "\t\tassert(0 < i && i <= n);",
            "\t\tfor (; i <= n; i += i & -i) {",
            "\t\t\tvec[i] += val;",
            "\t\t}",
            "\t}",
            "\tll sum(int r) const {",
            "\t\tll res = 0;",
            "\t\tfor (; r > 0; r -= r & -r) {",
            "\t\t\tres += vec[r];",
            "\t\t}",
            "\t\treturn res;",
            "\t}",
            "\tll sum(int l, int r) const {",
            "\t\tassert(l >= 0 && r <= n);",
            "\t\treturn sum(r) - sum(l - 1);",
            "\t}",
            "\tint lower_bound(int v) const {",
            "\t\tll sm = 0;",
            "\t\tint pos = 0;",
            "\t\tfor (int i = std::__lg(n); i >= 0; i--) {",
            "\t\t\tif (pos + (1 << i) < n && sm + vec[pos + (1 << i)] < v) {",
            "\t\t\t\tsm += vec[pos + (1 << i)];",
            "\t\t\t\tpos += (1 << i);",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn pos + 1;",
            "\t}",
            "\tstd::vector<ll> to_vector() const {",
            "\t\tstd::vector<ll> v(n);",
            "\t\tfor (int i = 1; i <= n; i++) {",
            "\t\t\tv[i - 1] += vec[i];",
            "\t\t\tint r = i + (i & -i);",
            "\t\t\tif (r <= n) {",
            "\t\t\t\tv[r - 1] -= vec[i];",
            "\t\t\t}",
            "\t\t}",
            "\t\treturn v;",
            "\t}",
            "\tvoid debug() const {",
            "\t\tdbg_print(to_vector());",
            "\t}",
            "};"
        ]
    },
    "dsu": {
        "prefix": [
            "dsu"
        ],
        "body": [
            "struct disjoint_set {",
            "\tstd::vector<int> pa, sz;",
            "\tdisjoint_set() {}",
            "\tvoid build(int n) {",
            "\t\tpa.resize(n + 1);",
            "\t\tsz.resize(n + 1);",
            "\t\tiota(pa.begin() + 1, pa.end(), 1);",
            "\t\tfill(sz.begin() + 1, sz.end(), 1);",
            "\t}",
            "\tint find(int v) {",
            "\t\tif (pa[v] == v) {",
            "\t\t\treturn v;",
            "\t\t}",
            "\t\treturn pa[v] = find(pa[v]);",
            "\t}",
            "\tvoid merge(int u, int v) {",
            "\t\tu = find(u);",
            "\t\tv = find(v);",
            "\t\tif (u == v) {",
            "\t\t\treturn;",
            "\t\t}",
            "\t\tif (sz[u] < sz[v]) {",
            "\t\t\tstd::swap(u, v);",
            "\t\t}",
            "\t\tpa[v] = pa[u];",
            "\t\tsz[u] += sz[v];",
            "\t}",
            "\tbool same(int u, int v) {",
            "\t\treturn find(u) == find(v);",
            "\t}",
            "\tint size(int v) {",
            "\t\treturn sz[find(v)];",
            "\t}",
            "\tint debug_find(int v) const {",
            "\t\treturn pa[v] == v ? v : debug_find(pa[v]);",
            "\t}",
            "\tvoid debug() const {",
            "\t\tstd::map<int, std::vector<int>> mp;",
            "\t\tfor (int i = 1; i < len(pa); i++) {",
            "\t\t\tmp[debug_find(i)].push_back(i);",
            "\t\t}",
            "\t\tdbg_print(mp);",
            "\t}",
            "};"
        ]
    },
    "comb": {
        "prefix": [
            "comb"
        ],
        "body": [
            "ll modpow(ll x, ll n) {",
            "\tll res = 1;",
            "\twhile (n > 0) {",
            "\t\tif (n & 1) {",
            "\t\t\tres = res * x % MOD;",
            "\t\t}",
            "\t\tx = x * x % MOD;",
            "\t\tn >>= 1;",
            "\t}",
            "\treturn res;",
            "}",
            "struct fact_inv {",
            "\tstd::vector<ll> fact;",
            "\tstd::vector<ll> inv;",
            "\tvoid init(int n) {",
            "\t\tfact.resize(n + 1);",
            "\t\tinv.resize(n + 1);",
            "\t\tfact[0] = 1;",
            "\t\tfor (int i = 1; i <= n; ++i) {",
            "\t\t\tfact[i] = fact[i - 1] * i % MOD;",
            "\t\t}",
            "\t\tinv[n] = modpow(fact[n], MOD - 2);",
            "\t\tfor (int i = n - 1; i >= 0; --i) {",
            "\t\t\tinv[i] = inv[i + 1] * (i + 1) % MOD;",
            "\t\t}",
            "\t}",
            "\tll comb(int n, int k) {",
            "\t\treturn fact[n] * inv[k] % MOD * inv[n - k] % MOD;",
            "\t}",
            "\tll perm(int n, int k) {",
            "\t\treturn fact[n] * inv[n - k] % MOD;",
            "\t}",
            "};"
        ]
    }
}
